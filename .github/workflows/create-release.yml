name: Create Release on Version Update

on:
  push:
    branches:
      - master
    paths:
      - 'mousetracks2/version.py'

permissions:
  contents: write

jobs:
  create_release:
    name: Create Release
    runs-on: windows-latest
    steps:
      - name: Checkout full repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create virtual environment
        shell: cmd
        run: |
          python -m venv .venv

      - name: Update components
        shell: cmd
        run: |
          call .venv\Scripts\activate
          python -m pip install --upgrade pip wheel
          call .venv\Scripts\deactivate

      - name: Install dependencies
        shell: cmd
        run: |
          call .venv\Scripts\activate
          python -m pip install --upgrade -r requirements.txt
          call .venv\Scripts\deactivate

      - name: Get version details from file
        id: extract_version
        shell: cmd
        run: |
          call .venv\Scripts\activate
          python .github/scripts/get-version.py
          call .venv\Scripts\deactivate

      - name: Check if tag already exists
        shell: bash
        run: |
          TAG_NAME="${{ steps.extract_version.outputs.tag_name }}"
          echo "Checking for existing tag: $TAG_NAME"
          # git rev-parse exits with non-zero status if tag doesn't exist
          if git rev-parse --verify "refs/tags/$TAG_NAME" >/dev/null 2>&1; then
            echo "::error::Tag $TAG_NAME already exists. Halting workflow to prevent duplicate release."
            echo "Please ensure __version__ in 'mousetracks2/version.py' is incremented to a new version."
            exit 1
          else
            echo "Tag $TAG_NAME does not exist. Proceeding to create tag and release."
          fi

      - name: Configure Git committer
        shell: bash
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      - name: Prepare Release Notes Body (Python)
        id: prep_release_notes
        shell: python
        env:
          # Pass the full commit message to the Python script as an environment variable
          FULL_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          import os
          message = os.environ['FULL_COMMIT_MESSAGE']
          subject, *comment_lines = message.splitlines()
          comment = '\n'.join(comment_lines).strip()

          # --- Logging for verification ---
          print("Full commit message received by Python script:")
          print("<<<<<<<<<<")
          print(message)
          print(">>>>>>>>>>")
          print("---")
          print("Processed commit comment (for release notes):")
          print("<<<<<<<<<<")
          print(comment)
          print(">>>>>>>>>>")
          print("---")
          # --- End Logging ---

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            # Using a delimiter (EOF here, can be any unique string) for multiline output
            f.write(f"release_body<<EOF_COMMIT_BODY\n")
            f.write(f"{body}\n") # Write the potentially multiline body
            f.write(f"EOF_COMMIT_BODY\n")

      - name: Create Git Tag and Push
        shell: bash
        run: |
          TAG_NAME="${{ steps.extract_version.outputs.tag_name }}"
          COMMIT_SHA="${{ github.sha }}" # The commit that updated version.py
          RELEASE_NAME="${{ steps.extract_version.outputs.release_name }}"

          echo "Creating annotated tag $TAG_NAME for commit $COMMIT_SHA"
          # Create an annotated tag (recommended for releases)
          git tag -a "$TAG_NAME" -m "$RELEASE_NAME - triggered by commit changing version.py" "$COMMIT_SHA"

          echo "Pushing tag $TAG_NAME to origin"
          git push origin "$TAG_NAME"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.CREATE_RELEASE_TOKEN }}  # Permissions: Contents RW
        with:
          tag_name: ${{ steps.extract_version.outputs.tag_name }}
          name: ${{ steps.extract_version.outputs.release_name }}
          body: ${{ steps.prep_release_notes.outputs.release_body }}
          draft: false
          prerelease: false

